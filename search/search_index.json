{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"A-Frame Locomotion","text":"<p>A-Frame Locomotion is a collection of components, systems and primitives for all forms of locomotion in VR. It aims to be simple, modular, flexible and 'just work'. You can freely pick out the things you need or combine them in new and creative ways.</p> <p>Here are some quick examples of the locomotion schemes you can achieve:</p>"},{"location":"#quick-examples","title":"Quick examples","text":"Example Components Smooth locomotion with snap turning <code>smooth-locomotion</code> and <code>snap-turn</code> Snap turning with fade transitions <code>snap-turn=\"delay: 0.1\"</code> and <code>&lt;al-snap-turn-fade&gt;</code> Smooth turning <code>smooth-turning</code> Vignette when moving <code>al-vignette</code> Smooth locomotion on a nav-mesh <code>smooth-locomotion</code> with <code>nav-mesh-strategy</code> and <code>nav-mesh</code> Smooth locomotion without falling of edges <code>smooth-locomotion=\"fallMode: prevent\"</code> with <code>nav-mesh-strategy</code> and <code>nav-mesh</code> Remote controlling an actor <code>smooth-locomotion=\"target: #actor; reference: #actor\"</code> <p>Note: The above examples assume a camera rig to be used and omits corresponding property values for brevity. See reference documentation for the mentioned components or explore the full examples.</p>"},{"location":"examples/basic/","title":"Basic","text":""},{"location":"examples/basic/#code","title":"Code","text":"<pre><code>&lt;a-scene background=\"color: gray\" embedded&gt;\n    &lt;!-- Simple scene --&gt;\n    &lt;a-box scale=\"20 20 20\" position=\"0 -10 0\" material=\"src: url(../assets/grid.png); repeat: 20 20\"&gt;&lt;/a-box&gt;\n    &lt;a-sphere color=\"red\" radius=\"0.2\" scale=\"1 0.2 1\"&gt;&lt;/a-sphere&gt;\n\n    &lt;!-- Camera rig --&gt;\n    &lt;a-entity id=\"rig\"&gt;\n        &lt;a-camera id=\"camera\"&gt;&lt;/a-camera&gt;\n\n        &lt;!-- Hands --&gt;\n        &lt;a-entity hand-controls=\"hand: left\" smooth-locomotion=\"target: #rig; reference: #camera\"&gt;&lt;/a-entity&gt;\n        &lt;a-entity hand-controls=\"hand: right\" snap-turn=\"target: #rig; reference: #camera\"&gt;&lt;/a-entity&gt;\n    &lt;/a-entity&gt;\n&lt;/a-scene&gt;\n</code></pre>"},{"location":"examples/basic/#see-also","title":"See Also","text":"<ul> <li>smooth-locomotion component</li> <li>snap-turn component</li> </ul>"},{"location":"examples/head-occlusion/","title":"Head occlusion","text":""},{"location":"examples/head-occlusion/#code","title":"Code","text":"<pre><code>&lt;a-scene background=\"color: gray\" embedded nav-mesh-strategy&gt;\n    &lt;!-- Environment --&gt;\n    &lt;a-entity gltf-model=\"url(../assets/navmesh.glb)\" nav-mesh&gt;&lt;/a-entity&gt;\n\n    &lt;!-- Camera rig --&gt;\n    &lt;a-entity id=\"rig\" gravity&gt;\n        &lt;a-camera id=\"camera\" nav-mesh-constrained=\"offset: 0 1.6 0\"&gt;\n            &lt;al-head-occlusion-fade objects=\"[nav-mesh]\"&gt;&lt;/al-head-occlusion-fade&gt;\n        &lt;/a-camera&gt;\n\n        &lt;!-- Hands --&gt;\n        &lt;a-entity hand-controls=\"hand: left\" smooth-locomotion=\"target: #rig; reference: #camera\"&gt;&lt;/a-entity&gt;\n        &lt;a-entity hand-controls=\"hand: right\" snap-turn=\"target: #rig; reference: #camera\"&gt;&lt;/a-entity&gt;\n    &lt;/a-entity&gt;\n&lt;/a-scene&gt;\n</code></pre>"},{"location":"examples/head-occlusion/#see-also","title":"See Also","text":"<ul> <li>&lt;al-head-occlusion-fade&gt; primitive</li> </ul>"},{"location":"examples/nav-mesh-basic/","title":"Nav mesh basic","text":""},{"location":"examples/nav-mesh-basic/#code","title":"Code","text":"<pre><code>&lt;a-scene background=\"color: gray\" embedded nav-mesh-strategy&gt;\n    &lt;!-- Environment --&gt;\n    &lt;a-entity gltf-model=\"url(../assets/navmesh.glb)\" nav-mesh&gt;&lt;/a-entity&gt;\n\n    &lt;!-- Camera rig --&gt;\n    &lt;a-entity id=\"rig\" gravity&gt;\n        &lt;a-camera id=\"camera\" nav-mesh-constrained=\"offset: 0 1.6 0\"&gt;&lt;/a-camera&gt;\n\n        &lt;!-- Hands --&gt;\n        &lt;a-entity hand-controls=\"hand: left\" smooth-locomotion=\"target: #rig; reference: #camera\"&gt;&lt;/a-entity&gt;\n        &lt;a-entity hand-controls=\"hand: right\" snap-turn=\"target: #rig; reference: #camera\"&gt;&lt;/a-entity&gt;\n    &lt;/a-entity&gt;\n&lt;/a-scene&gt;\n</code></pre>"},{"location":"examples/nav-mesh-basic/#see-also","title":"See Also","text":"<ul> <li>nav-mesh-strategy component</li> <li>nav-mesh component</li> </ul>"},{"location":"examples/rc/","title":"Rc","text":""},{"location":"examples/rc/#code","title":"Code","text":"<pre><code>&lt;a-scene background=\"color: gray\" embedded&gt;\n    &lt;!-- Simple scene  --&gt;\n    &lt;a-box scale=\"20 20 20\" position=\"0 -10 0\" material=\"src: url(../assets/grid.png); repeat: 20 20\"&gt;&lt;/a-box&gt;\n    &lt;a-sphere color=\"red\" radius=\"0.2\" scale=\"1 0.2 1\"&gt;&lt;/a-sphere&gt;\n\n    &lt;!-- Entity for remote control --&gt;\n    &lt;a-box color=\"green\" id=\"car\" scale=\"0.2 0.2 0.5\"&gt;&lt;/a-box&gt;\n\n    &lt;!-- Camera rig --&gt;\n    &lt;a-entity id=\"rig\"&gt;\n        &lt;a-camera id=\"camera\"&gt;&lt;/a-camera&gt;\n\n        &lt;!-- Hands --&gt;\n        &lt;a-entity hand-controls=\"hand: left\" smooth-locomotion=\"target: #car; reference: #car; sideways: false; inputMode: analog; moveSpeed: 4\"&gt;&lt;/a-entity&gt;\n        &lt;a-entity hand-controls=\"hand: right\" smooth-turn=\"target: #car; reference: #car; turnSpeed: 180\"&gt;&lt;/a-entity&gt;\n    &lt;/a-entity&gt;\n&lt;/a-scene&gt;\n</code></pre>"},{"location":"examples/rc/#see-also","title":"See Also","text":"<ul> <li>smooth-locomotion component</li> <li>smooth-turn component</li> </ul>"},{"location":"examples/vignette/","title":"Vignette","text":""},{"location":"examples/vignette/#code","title":"Code","text":"<pre><code>&lt;a-scene background=\"color: gray\" embedded&gt;\n    &lt;!-- Simple scene  --&gt;\n    &lt;a-box scale=\"20 20 20\" position=\"0 -10 0\" material=\"src: url(../assets/grid.png); repeat: 20 20\"&gt;&lt;/a-box&gt;\n    &lt;a-sphere color=\"red\" radius=\"0.2\" scale=\"1 0.2 1\"&gt;&lt;/a-sphere&gt;\n\n    &lt;!-- Camera rig --&gt;\n    &lt;a-entity id=\"rig\"&gt;\n        &lt;a-camera id=\"camera\"&gt;\n            &lt;al-vignette motion-source=\"#rig\"&gt;&lt;/al-vignette&gt;\n        &lt;/a-camera&gt;\n\n        &lt;!-- Hands --&gt;\n        &lt;a-entity hand-controls=\"hand: left\" smooth-locomotion=\"target: #rig; reference: #camera\"&gt;&lt;/a-entity&gt;\n        &lt;a-entity hand-controls=\"hand: right\" snap-turn=\"target: #rig; reference: #camera\"&gt;&lt;/a-entity&gt;\n    &lt;/a-entity&gt;\n&lt;/a-scene&gt;\n</code></pre>"},{"location":"examples/vignette/#see-also","title":"See Also","text":"<ul> <li>&lt;al-vignette&gt; primitive</li> <li>snap-turn component</li> </ul>"},{"location":"reference/auxiliary/al-head-occlusion-fade.primitive/","title":"al-head-occlusion-fade","text":"<p>Primitive that fades the view in/out when the head is placed inside an wall or object.</p>"},{"location":"reference/auxiliary/al-head-occlusion-fade.primitive/#attributes","title":"Attributes","text":"Attribute Maps to Description Type Default Value objects head-occlusion.objects Selector for all the objects to check head occlusion for <code>selectorAll</code>"},{"location":"reference/auxiliary/al-head-occlusion-fade.primitive/#example","title":"Example","text":"<p>The <code>al-head-occlusion-fade</code> primitive should be a direct child of the camera. The following shows the primitive being used. <pre><code>&lt;a-box class=\"box\"&gt;&lt;/a-box&gt;\n\n&lt;a-entity id=\"rig\"&gt;\n    &lt;a-entity id=\"camera\" camera position=\"0 1.6 0\" wasd-controls look-controls&gt;\n        &lt;al-head-occlusion-fade objects=\".box\"&gt;&lt;/al-head-occlusion-fade&gt;\n    &lt;/a-entity&gt;\n&lt;/a-entity&gt;\n</code></pre></p> <p>Note: The head occlusion detection uses the XR camera, meaning it won't activate when vr-mode isn't active. If this is something you need/want, please open a new issue on GitHub and indicate your use case.</p>"},{"location":"reference/auxiliary/al-head-occlusion-fade.primitive/#source","title":"Source","text":"<p><code>src/auxiliary/fade.primitive.ts:63</code></p>"},{"location":"reference/auxiliary/al-snap-turn-fade.primitive/","title":"al-snap-turn-fade","text":"<p>Primitive that fades the view in/out when snap-turning. Requires the usage of <code>snap-turn</code>.</p>"},{"location":"reference/auxiliary/al-snap-turn-fade.primitive/#attributes","title":"Attributes","text":"Attribute Maps to Description Type Default Value rotation-source rotation-input.source Selector for the entity that is rotated. This should be the target of <code>snap-turn</code> <code>selector</code>"},{"location":"reference/auxiliary/al-snap-turn-fade.primitive/#example","title":"Example","text":"<p>The <code>al-snap-turn-fade</code> primitive should be a direct child of the camera. The following shows the primitive being used with snap-turning. Notice the configured delay, without it the snap is instant and no fade will take place: <pre><code>&lt;a-entity id=\"rig\"&gt;\n    &lt;a-entity id=\"camera\" camera position=\"0 1.6 0\" wasd-controls look-controls&gt;\n        &lt;al-snap-turn-fade rotation-source=\"#rig\"&gt;&lt;/al-snap-turn-fade&gt;\n    &lt;/a-entity&gt;\n\n    &lt;a-entity vive-controls=\"hand: right\"\n              oculus-touch-controls=\"hand: right\"\n              snap-turn=\"target: #rig; reference: #camera; delay: 0.1\"&gt;\n    &lt;/a-entity&gt;\n&lt;/a-entity&gt;\n</code></pre></p>"},{"location":"reference/auxiliary/al-snap-turn-fade.primitive/#source","title":"Source","text":"<p><code>src/auxiliary/fade.primitive.ts:31</code></p>"},{"location":"reference/auxiliary/al-vignette.primitive/","title":"al-vignette","text":"<p>Primitive that shows a vignette when moving.</p>"},{"location":"reference/auxiliary/al-vignette.primitive/#attributes","title":"Attributes","text":"Attribute Maps to Description Type Default Value motion-source motion-input.source Selector for the entity that is the target of a moving component (like <code>smooth-locomotion</code>). <code>selector</code> intensity motion-input.maxOutput <code>number</code> 2"},{"location":"reference/auxiliary/al-vignette.primitive/#example","title":"Example","text":"<p>The <code>al-vignette</code> primitive should be a direct child of the camera. The following shows the primitive being used with smooth locomotion. <pre><code>&lt;a-entity id=\"rig\"&gt;\n    &lt;a-entity id=\"camera\" camera position=\"0 1.6 0\" wasd-controls look-controls&gt;\n        &lt;al-vignette motion-source=\"#rig\"&gt;&lt;/al-vignette&gt;\n    &lt;/a-entity&gt;\n\n    &lt;a-entity\n        vive-controls=\"hand: left\"\n        oculus-touch-controls=\"hand: left\"\n        smooth-locomotion=\"target: #rig; reference: #camera\"&gt;\n    &lt;/a-entity&gt;\n&lt;/a-entity&gt;\n</code></pre></p>"},{"location":"reference/auxiliary/al-vignette.primitive/#source","title":"Source","text":"<p><code>src/auxiliary/vignette.primitive.ts:46</code></p>"},{"location":"reference/movement/gravity.component/","title":"gravity","text":"<p>This component is a 'velocity' component and can be used to influence motion based components like <code>smooth-locomotion</code>. On its own the component won't do anything.</p>"},{"location":"reference/movement/gravity.component/#properties","title":"Properties","text":"Property Description Type Default Value strength The gravitational acceleration in m/s^2 <code>number</code> 9.81"},{"location":"reference/movement/gravity.component/#remarks","title":"Remarks","text":"<p>The <code>gravity</code> component should be applied to the target of motion. When using <code>smooth-locomotion</code> with the default camera rig, the rig element is the target and should have the <code>gravity</code> component on it.</p>"},{"location":"reference/movement/gravity.component/#example","title":"Example","text":"<pre><code>&lt;a-entity id=\"rig\" gravity&gt;\n  &lt;a-entity id=\"camera\" camera position=\"0 1.6 0\" wasd-controls look-controls&gt;&lt;/a-entity&gt;\n\n  &lt;a-entity vive-controls=\"hand: left\"\n            oculus-touch-controls=\"hand: left\"\n            smooth-locomotion=\"target: #rig; reference: #camera\"&gt;\n  &lt;/a-entity&gt;\n&lt;/a-entity&gt;\n</code></pre>"},{"location":"reference/movement/gravity.component/#source","title":"Source","text":"<p><code>src/movement/gravity.component.ts:28</code></p>"},{"location":"reference/movement/smooth-locomotion.component/","title":"smooth-locomotion","text":"<p>Component for reading the input of a thumbstick and converting that into motion on a target entity. The rotation of the reference is used to determine the direction to move in. This can be used on a camera rig to move around the world using either head orientation or controller orientation.</p>"},{"location":"reference/movement/smooth-locomotion.component/#properties","title":"Properties","text":"Property Description Type Default Value enabled Whether the smooth locomotion is active or not <code>string</code> true target Selector for the target of the motion <code>selector</code> reference Selector for the reference to determine world position and rotation <code>selector</code> moveSpeed The (max) speed for the target (m/s) <code>number</code> 1.5 forward Whether or not forward movement should be applied <code>string</code> true backward Whether or not backward movement should be applied <code>string</code> true sideways Whether or not sideways movement should be applied <code>string</code> true inputMode The mode for interpreting the input. With the <code>binary</code> mode even small inputs will result in maximum speed being applied. The <code>analog</code> mode will scale the applied speed between 0 and moveSpeed based on the input magnitude <code>string</code> binary fallMode The mode for how falling should be handled in case the reference is moving off an edge. With <code>snap</code> the reference will always snap to the ground, instantly dropping down. With <code>prevent</code> the reference won't be moved over the edge. With <code>fall</code> the reference is moved over the edge, but not forced/snapped to the ground, allowing it to fall down. (Only applies when using the <code>nav-mesh</code>) <code>string</code> fall"},{"location":"reference/movement/smooth-locomotion.component/#events","title":"Events","text":"Event Name Description motion Target was moved through this component. No movement is also signalled through the <code>motion</code> event"},{"location":"reference/movement/smooth-locomotion.component/#example","title":"Example","text":"<p>The <code>smooth-locomotion</code> component needs to be applied to an entity that will emit the <code>axismove</code> event, commonly one of the hands. Below is an example using a camera rig to enable smooth locomotion using the thumbstick on the left controller and using head orientation: <pre><code>&lt;a-entity id=\"rig\"&gt;\n    &lt;a-entity id=\"camera\" camera position=\"0 1.6 0\" wasd-controls look-controls&gt;&lt;/a-entity&gt;\n\n    &lt;a-entity id=\"leftHand\"\n              vive-controls=\"hand: left\"\n              oculus-touch-controls=\"hand: left\"\n              smooth-locomotion=\"target: #rig; reference: #camera\"&gt;\n    &lt;/a-entity&gt;\n&lt;/a-entity&gt;\n</code></pre></p> <p>To use controller orientation instead, change the reference to the controller, as such: <pre><code>&lt;a-entity id=\"leftHand\"\n            vive-controls=\"hand: left\"\n            oculus-touch-controls=\"hand: left\"\n            smooth-locomotion=\"target: #rig; reference: #leftHand\"&gt;\n&lt;/a-entity&gt;\n</code></pre></p>"},{"location":"reference/movement/smooth-locomotion.component/#source","title":"Source","text":"<p><code>src/movement/smooth-locomotion.component.ts:55</code></p>"},{"location":"reference/movement/smooth-turn.component/","title":"smooth-turn","text":"<p>Component for reading the input of a thumbstick and using that to effectively rotate the reference in place. This is accomplished by rotating and moving the target. It's assumed that the reference is a descendant of the target. This can be used on the camera rig to achieve smooth turning.</p>"},{"location":"reference/movement/smooth-turn.component/#properties","title":"Properties","text":"Property Description Type Default Value enabled Whether the smooth turn is active or not <code>string</code> true target Selector for the target to apply rotation and translation to <code>selector</code> reference Selector for the reference to 'effectively' rotate <code>selector</code> turnSpeed The (max) rotation speed (degrees/s) <code>number</code> 20 inputMode The mode for interpreting the input. With the <code>binary</code> mode even small inputs will result in maximum speed being applied. The <code>analog</code> mode will scale the applied speed between 0 and <code>turnSpeed</code> based on the input magnitude <code>string</code> binary"},{"location":"reference/movement/smooth-turn.component/#events","title":"Events","text":"Event Name Description rotation Target was rotated through this component. No movement is also signalled through the <code>motion</code> event"},{"location":"reference/movement/smooth-turn.component/#example","title":"Example","text":"<p>The <code>smooth-turn</code> component needs to be applied to an entity that will emit the <code>axismove</code> event, commonly one of the hands. Below is an example using a camera rig: <pre><code>&lt;a-entity id=\"rig\"&gt;\n    &lt;a-entity id=\"camera\" camera position=\"0 1.6 0\" wasd-controls look-controls&gt;&lt;/a-entity&gt;\n\n    &lt;a-entity vive-controls=\"hand: right\"\n              oculus-touch-controls=\"hand: right\"\n              smooth-turn=\"target: #rig; reference: #camera\"&gt;\n    &lt;/a-entity&gt;\n&lt;/a-entity&gt;\n</code></pre></p>"},{"location":"reference/movement/smooth-turn.component/#source","title":"Source","text":"<p><code>src/movement/smooth-turn.component.ts:30</code></p>"},{"location":"reference/movement/snap-turn.component/","title":"snap-turn","text":"<p>Component for reading the input of a thumbstick and using that to effectively rotate the reference in place in discrete steps. This is accomplished by rotating and moving the target. It's assumed that the reference is a descendant of the target. This can be used on the camera rig to achieve snap turning.</p>"},{"location":"reference/movement/snap-turn.component/#properties","title":"Properties","text":"Property Description Type Default Value enabled Whether or not the snapturning is enabled <code>string</code> true target Selector for the target to apply rotation and translation to <code>selector</code> reference Selector for the reference to 'effectively' rotate <code>selector</code> turnSize The rotation per snap (degrees) <code>number</code> 45 activateThreshold The amount the thumbstick needs to be pushed to activate a snap turn <code>number</code> 0.9 deactivateThreshold The threshold the thumbstick needs to cross before a new activation may take place <code>number</code> 0.8 delay Optional delay applied before and after the actual snap rotation takes place <code>number</code> 0"},{"location":"reference/movement/snap-turn.component/#events","title":"Events","text":"Event Name Description rotation Target was rotated through this component. No movement is also signalled through the <code>motion</code> event prerotation Target is about to rotate (only when a <code>delay</code> is configured) postrotation Target has just rotated (only when a <code>delay</code> is configured)"},{"location":"reference/movement/snap-turn.component/#example","title":"Example","text":"<p>The <code>snap-turn</code> component needs to be applied to an entity that will emit the <code>axismove</code> event, commonly one of the hands. Below is an example using a camera rig: <pre><code>&lt;a-entity id=\"rig\"&gt;\n    &lt;a-entity id=\"camera\" camera position=\"0 1.6 0\" wasd-controls look-controls&gt;&lt;/a-entity&gt;\n\n    &lt;a-entity vive-controls=\"hand: right\"\n              oculus-touch-controls=\"hand: right\"\n              snap-turn=\"target: #rig; reference: #camera\"&gt;\n    &lt;/a-entity&gt;\n&lt;/a-entity&gt;\n</code></pre></p> <p>In case a transition needs to be shown a delay can be configured. This delay is applied twice: before and after the actual snap rotation. This can be used to make a quick fade transition for each snap turn, see <code>al-snap-turn-fade</code></p>"},{"location":"reference/movement/snap-turn.component/#source","title":"Source","text":"<p><code>src/movement/snap-turn.component.ts:43</code></p>"},{"location":"reference/nav-mesh/nav-mesh-strategy.component/","title":"nav-mesh-strategy","text":"<p>Selects the nav mesh strategy that is used by all aframe-locomotion components. This component should be added to the scene if you want to make use of nav mesh based functionality. Once configured, nav meshes need to be marked using the <code>nav-mesh</code> component.</p>"},{"location":"reference/nav-mesh/nav-mesh-strategy.component/#properties","title":"Properties","text":"Property Description Type Default Value strategy Either <code>simple</code> or <code>scan</code>. The <code>simple</code> strategy allows to check if movement is valid based on the nav-mesh in a binary fashion (movement is either valid or not). The <code>scan</code> strategy falls back to alternatives that are slightly to the side of the movement. This allows sliding across walls. <code>string</code> scan"},{"location":"reference/nav-mesh/nav-mesh-strategy.component/#example","title":"Example","text":"<p>Add the <code>nav-mesh-strategy</code> component to the scene <pre><code>&lt;a-scene nav-mesh-strategy&gt;\n    &lt;!-- entities with nav-mesh component --&gt;\n&lt;/a-scene&gt;\n</code></pre></p> <p>Note: In many cases the navigation meshes should not be visible. The <code>nav-mesh</code> component doesn't handle this for you, so make sure to manually add <code>material=\"visible: false\"</code> or hide the mesh in some other way.</p>"},{"location":"reference/nav-mesh/nav-mesh-strategy.component/#source","title":"Source","text":"<p><code>src/nav-mesh/nav-mesh-strategy.component.ts:29</code></p>"},{"location":"reference/nav-mesh/nav-mesh.component/","title":"nav-mesh","text":"<p>This component marks an object as a nav mesh, which can be used in motion. This component only has an effect when the nav-mesh system is activated by picking a <code>nav-mesh-strategy</code>.</p>"},{"location":"reference/nav-mesh/nav-mesh.component/#properties","title":"Properties","text":"Property Description Type Default Value This component has no properties"},{"location":"reference/nav-mesh/nav-mesh.component/#example","title":"Example","text":"<p>Mark any entity that holds a navigation mesh: <pre><code>&lt;a-entity gltf-model=\"url(assets/navmesh.glb)\" nav-mesh&gt;&lt;/a-entity&gt;\n</code></pre></p> <p>Note: In many cases the navigation meshes should not be visible. The <code>nav-mesh</code> component doesn't handle this for you, so make sure to manually add <code>material=\"visible: false\"</code> or hide the mesh in some other way.</p>"},{"location":"reference/nav-mesh/nav-mesh.component/#source","title":"Source","text":"<p><code>src/nav-mesh/nav-mesh.component.ts:19</code></p>"}]}